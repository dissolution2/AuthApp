this rule :
{
  "rules": {
    "Groups" : {
      "$group": {
        // If this group doesn't exist, allow the read.
        // If the group does exist, only the owner & it's members
        // can read this group's entire data tree.
        ".read": "!data.exists() || (auth != null && (data.child('Owner').val() === auth.uid || data.child('Allowed_1').child(auth.token.email).val() === auth.token.email)) || (data.child('Allowed_2').child(auth.token.email).val() === auth.token.email) || (data.child('Allowed_3').child(auth.token.email).val() === auth.token.email) || (data.child('Allowed_4').child(auth.token.email).val() === auth.token.email) || (data.child('Allowed_5').child(auth.token.email).val() === auth.token.email) || (data.child('Allowed_6').child(auth.token.email).val() === auth.token.email)",

    "Owner": {
          // Only the current owner can write data to this key if it exists.
          // If the owner is not yet set, they can only claim it for themselves.
          ".write": "auth != null && (data.val() === auth.uid || (!data.exists() && newData.val() === auth.uid))",

          // Force this value to be a string
          //".validate": "newData.isString()"
        },

    "Allowed_1": {
          // Only the owner can edit the entire member list
          // For a new group, the owner is also granted write access
          // for it's creation
          ".write": "auth != null && (data.parent().child('Owner').val() === auth.uid || data.parent().child('Allowed_1').child(auth.uid).val() === true || (!data.exists() && newData.parent().child('Owner').val() === auth.uid))"
        },
    "Allowed_2": {
          // Only the owner can edit the entire member list
          // For a new group, the owner is also granted write access
          // for it's creation
          ".write": "auth != null && (data.parent().child('Owner').val() === auth.uid || data.parent().child('Allowed_2').child(auth.uid).val() === true || (!data.exists() && newData.parent().child('Owner').val() === auth.uid))"
        },
		"Allowed_3": {
          // Only the owner can edit the entire member list
          // For a new group, the owner is also granted write access
          // for it's creation
          ".write": "auth != null && (data.parent().child('Owner').val() === auth.uid || data.parent().child('Allowed_3').child(auth.uid).val() === true || (!data.exists() && newData.parent().child('Owner').val() === auth.uid))"
        },
		"Allowed_4": {
          // Only the owner can edit the entire member list
          // For a new group, the owner is also granted write access
          // for it's creation
          ".write": "auth != null && (data.parent().child('Owner').val() === auth.uid || data.parent().child('Allowed_4').child(auth.uid).val() === true || (!data.exists() && newData.parent().child('Owner').val() === auth.uid))"
        },
		"Allowed_5": {
          // Only the owner can edit the entire member list
          // For a new group, the owner is also granted write access
          // for it's creation
          ".write": "auth != null && (data.parent().child('Owner').val() === auth.uid || data.parent().child('Allowed_5').child(auth.uid).val() === true || (!data.exists() && newData.parent().child('Owner').val() === auth.uid))"
        },
		"Allowed_6": {
          // Only the owner can edit the entire member list
          // For a new group, the owner is also granted write access
          // for it's creation
          ".write": "auth != null && (data.parent().child('Owner').val() === auth.uid || data.parent().child('Allowed_6').child(auth.uid).val() === true || (!data.exists() && newData.parent().child('Owner').val() === auth.uid))"
        },
		"Data": {
          // The owner and members can edit anything under "Data"
          // Currently this includes deleting everything under it!
          // For a new group, the owner is also granted write access
          // for it's creation
          // TODO: tighten structure of "Data" like above
          ".write": "auth != null && (data.parent().child('Owner').val() === auth.uid || data.parent().child('Allowed_1').val() === auth.token.email) ||
		  auth != null && (data.parent().child('Allowed_2').val() === auth.token.email) ||
		  auth != null && (data.parent().child('Allowed_3').val() === auth.token.email) ||
		  auth != null && (data.parent().child('Allowed_4').val() === auth.token.email) ||
		  auth != null && (data.parent().child('Allowed_5').val() === auth.token.email) ||
		  auth != null && (data.parent().child('Allowed_6').val() === auth.token.email)",
          ".read": "auth != null && (data.parent().child('Allowed_1').val() === auth.token.email) ||
		  auth != null && (data.parent().child('Allowed_2').val() === auth.token.email) ||
		  auth != null && (data.parent().child('Allowed_3').val() === auth.token.email) ||
		  auth != null && (data.parent().child('Allowed_4').val() === auth.token.email) ||
		  auth != null && (data.parent().child('Allowed_5').val() === auth.token.email) ||
		  auth != null && (data.parent().child('Allowed_6').val() === auth.token.email)",
        }
      }
    },
   "Family":{
     ".indexOn": ["email"],
       ".read": "auth != null",
      ".write": "auth != null",
    },
    "Users":{
      ".indexOn": ["Email"],
				"$uid":{
          ".read": "auth != null && $uid == auth.uid",
          ".write": "auth != null && $uid == auth.uid"
      }
    }
  }
}

this database structure :
{
  "Family": {
    "Members": {
      "-NgLvCVeLHhJ-VaavxNf": {
        "delete": "false",
        "email": "gameworks1975.playertwo@gmail.com",
        "uid": "Pbwky3XaqWXhB7X27UZ6ZWeDR393"
      }
    }
  },
  "Groups": {
    "Pbwky3XaqWXhB7X27UZ6ZWeDR393": {
      "Allowed_1": "gameworks1975.playertwo@gmail.com",
      "Data": {
        "List": {
          "Refrigerator": {
            "-NgLvRNPv5-8OSJHSHJK": {
              "amount": "1l",
              "barcode": "2637484",
              "company": "cola",
              "name": "cola",
              "quantity": 1,
              "storage": [
                "c"
              ]
            }
          },
          "ShoppingList": "Main"
        }
      },
      "Owner": "Pbwky3XaqWXhB7X27UZ6ZWeDR393"
    },
    "oGm09XrH8tekko4bB0No7Qyp2oM2": {
      "Allowed_1": "larsen.robin75@gmail.com",
      "Allowed_2": "robin.larsen75@gmail.com",
      "Data": {
        "List": {
          "Refrigerator": {
            "-NgLrq4Ef76hNTvdzpr_": {
              "amount": "1l",
              "barcode": "4577",
              "company": "tine",
              "name": "melk",
              "quantity": 1,
              "storage": [
                "c"
              ]
            }
          }
        }
      },
      "Owner": "oGm09XrH8tekko4bB0No7Qyp2oM2"
    }
  },
  "Users": {
    "1EVjntbMGsZtgtHVgs60IbqujID2": {
      "FamilyUid": {
        "delete": "false",
        "email": "larsen.robin75@gmail.com",
        "hashFamily": {
          "1EVjntbMGsZtgtHVgs60IbqujID2": "oGm09XrH8tekko4bB0No7Qyp2oM2"
        },
        "role": "member",
        "shoppingList": "Main",
        "uid": "1EVjntbMGsZtgtHVgs60IbqujID2"
      }
    },
    "Pbwky3XaqWXhB7X27UZ6ZWeDR393": {
      "FamilyUid": {
        "delete": "false",
        "email": "gameworks1975.playerone@gmail.com",
        "hashFamily": {
          "-NgLvCVfzX2iIDLzjOmr": "gameworks1975.playertwo@gmail.com"
        },
        "role": "owner",
        "shoppingList": "Main",
        "uid": "Pbwky3XaqWXhB7X27UZ6ZWeDR393"
      }
    },
    "eIwMFE9sr8bv4POibeQQsCeF9v82": {
      "FamilyUid": {
        "delete": "false",
        "email": "robin.larsen75@gmail.com",
        "hashFamily": {
          "eIwMFE9sr8bv4POibeQQsCeF9v82": "oGm09XrH8tekko4bB0No7Qyp2oM2"
        },
        "role": "member",
        "shoppingList": "Main",
        "uid": "eIwMFE9sr8bv4POibeQQsCeF9v82"
      }
    },
    "oGm09XrH8tekko4bB0No7Qyp2oM2": {
      "FamilyUid": {
        "delete": "false",
        "email": "frameworkgames1975@gmail.com",
        "hashFamily": {
          "-NgLpqhNQpjr5oQ336io": "larsen.robin75@gmail.com",
          "-NgLpspI4ciBDBsWuIPx": "robin.larsen75@gmail.com"
        },
        "role": "owner",
        "shoppingList": "Main",
        "uid": "oGm09XrH8tekko4bB0No7Qyp2oM2"
      }
    }
  }
}

every thing worked up to ameworks1975.playerone@gmail.com logged inn.. did not get any permission to it's family ???

Family 1
is Owner  :
	frameworkgames1975@gmail
- Members is :
	larsen.robin75@gmail.com

	Family 2
is Owner  :
	gameworks1975.playerone@gmail
-Members is :
	robin.larsen75@gmail.com

need more test mails !!!

this worked .... might be something with who was member and owner or something ????

