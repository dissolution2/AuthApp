package com.fwa.app.authapp;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;

import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.util.Patterns;
import android.view.KeyEvent;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;

import androidx.activity.result.ActivityResult;
import androidx.activity.result.ActivityResultCallback;
import androidx.activity.result.ActivityResultLauncher;
import androidx.activity.result.contract.ActivityResultContracts;

import com.google.android.gms.auth.api.signin.GoogleSignIn;
import com.google.android.gms.auth.api.signin.GoogleSignInAccount;
import com.google.android.gms.auth.api.signin.GoogleSignInClient;
import com.google.android.gms.auth.api.signin.GoogleSignInOptions;
import com.google.android.gms.common.api.ApiException;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.auth.AuthCredential;
import com.google.firebase.auth.AuthResult;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.auth.GoogleAuthProvider;
import com.google.firebase.database.FirebaseDatabase;


public class MainActivity extends AppCompatActivity implements View.OnClickListener {

    private static final String ApiException = "ApiException";
    private static final String TAG = "TAG";

    //Sosial nettwork login
    GoogleSignInOptions gso;
    GoogleSignInClient gsc;
    ImageView googleBtn;

    String googleEmailString = "";

    private TextView register;
    private EditText editTextEmail, editTextPassword;
    private Button signIn;

    private FirebaseAuth mAuth;
    GoogleSignInAccount acct;
    private FirebaseDatabase database = FirebaseDatabase.getInstance("https://authapp-e8559-default-rtdb.europe-west1.firebasedatabase.app/");

    private ProgressBar progressBar;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        // Google - Sosial Nettwork login
        googleBtn = findViewById(R.id.google_btn);
        googleBtn.setOnClickListener(this);


        gso = new GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)
                .requestIdToken(getString(R.string.default_web_client_id))
                .requestEmail()
                .build();

        gsc = GoogleSignIn.getClient(this, gso);

        mAuth = FirebaseAuth.getInstance();

        if(acct!=null){
            navigateToSecondActivity();
        }

        register = (TextView) findViewById(R.id.register);
        register.setOnClickListener(this);

        signIn = (Button) findViewById(R.id.signIn);
        signIn.setOnClickListener(this);

        editTextEmail = (EditText) findViewById(R.id.email);
        editTextPassword = (EditText) findViewById(R.id.password);
        progressBar = (ProgressBar) findViewById(R.id.progressBar);




    }

    @Override
    public boolean onKeyDown(int key_code, KeyEvent key_event){
        if(key_code == KeyEvent.KEYCODE_BACK){
            super.onKeyDown(key_code, key_event);
            Toast.makeText(getApplicationContext(), "back press Disabled!!",
                    Toast.LENGTH_LONG).show();



        }
        return false;
    }

    void signIn(){
        Intent signInIntent = gsc.getSignInIntent();
        startActivityForResult(signInIntent,1000);
    }


    @Override
    protected void onActivityResult(int requestCode, int resultCode,Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

       //String googleEmailString = "";

        if(requestCode == 1000) {
            Task<GoogleSignInAccount> task = GoogleSignIn.getSignedInAccountFromIntent(data);

            try {
                task.getResult(ApiException.class);
                if ( mAuth.getCurrentUser() == null ) {  /** Make a new User to the auth base */
// Can be null, because of logg out!! -- need to then check user account ???





                    googleEmailString = task.getResult().getEmail().toString();
                    mAuth.createUserWithEmailAndPassword( googleEmailString, "password").addOnCompleteListener(new OnCompleteListener<AuthResult>() {
                    @Override
                    public void onComplete(@NonNull Task<AuthResult> task) {

                        if (task.isSuccessful()) {
                            Log.d(TAG, "Task.isSuccessful userCreated");

                            String id = database.getReference().push().getKey();


                            User user = new User("", "", googleEmailString);
                            database.getReference(FirebaseAuth.getInstance().getCurrentUser().getUid()).child("Family").child("UsersGroup").child(id).setValue(user).addOnCompleteListener(new OnCompleteListener<Void>() {
                                @Override
                                public void onComplete(@NonNull Task<Void> task) {
                                    if (task.isSuccessful()) {

                                        Log.d(TAG, "Task.isSuccessful Add user to database!! ");

                                        Toast.makeText(MainActivity.this, "Successfully registered!! Check your Email to Verify account!!", Toast.LENGTH_LONG).show();

                                        FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser();
                                        user.sendEmailVerification();

                                        //startActivity(new Intent(MainActivity.this, ManualyScanProductForTestingToDB.class));
                                        Log.d(TAG, "loggInn 3 After create user!!");
                                        navigateToSecondActivity();

                                        // redirect to login Layout! // to main app view not logInn as if user just mad a successfully user we don't have to
                                        // log them inn one more time !!!
                                    } else {
                                        //Toast.makeText(RegisterUser.this,"Faild to register! Pleas try again!", Toast.LENGTH_LONG).show();
                                        Log.d(TAG, "Task.fail on add user to database!!! ");
                                    }
                                    progressBar.setVisibility(View.GONE);
                                }
                            });
                        } else {
                            Log.d(TAG, "Task.Failed to Created user!! ");
                            acct = GoogleSignIn.getLastSignedInAccount(MainActivity.this);
                            if (acct != null) {

                                progressBar.setVisibility(View.VISIBLE);

                                Log.d(TAG, "Goggle acct is: " + acct.getEmail());

                                /** We are working here !!! get logged inn first time, after logout
                                 * - error Task.Failed to create user
                                 *  because it all ready exist .. need to get hold of the user and logg the user inn !!!
                                 *
                                 *  2022-08-27 01:58:26.890 6211-6211/com.fwa.app.authapp D/TAG: Task.Failed to Created user!!
                                 * 2022-08-27 01:58:26.890 6211-6211/com.fwa.app.authapp D/TAG: Goggle acct is: larsen.robin75@gmail.com
                                 *
                                 * */
                                mAuth.signInWithEmailAndPassword(acct.getEmail(), "password").addOnCompleteListener(new OnCompleteListener<AuthResult>() {
                                    @Override
                                    public void onComplete(@NonNull Task<AuthResult> task) {
                                        if (task.isSuccessful()) {

                                            if(task.isSuccessful()) {
                                                navigateToSecondActivity();
                                            }
                                        } else {
                                            Toast.makeText(MainActivity.this, "User not found!! Check your credentials or Register an Account!!", Toast.LENGTH_LONG).show();
                                        }
                                        progressBar.setVisibility(View.GONE);
                                    }
                                });
                            }
                        }
                    }
                });

            }
        } catch (ApiException e) {
                Toast.makeText(getApplicationContext(), "Something went wrong", Toast.LENGTH_SHORT).show();
            }

        }

    }

    private void navigateToSecondActivity() {
        finish();
        startActivity(new Intent(MainActivity.this,ManualyScanProductForTestingToDB.class));
    }


    @Override
    public void onClick(View view) {
        switch (view.getId()) {
            case R.id.register:
                startActivity(new Intent(this, RegisterUser.class));
                break;
            case R.id.signIn:
                userLogIn();
                break;
            case R.id.google_btn:
                signIn();
                break;
        }
    }

    private void userLogIn() {
        String email = editTextEmail.getText().toString().trim();
        String password = editTextPassword.getText().toString().trim();

        if (password.isEmpty()) {
            editTextPassword.setError("Password is required!");
            editTextPassword.requestFocus();
            return;
        }

        if (password.length() < 6) {
            editTextPassword.setError("Password length should be 6 characters!");
            editTextPassword.requestFocus();
            return;
        }

        if (email.isEmpty()) {
            editTextEmail.setError("Email is required!");
            editTextEmail.requestFocus();
            return;
        }

        if (!Patterns.EMAIL_ADDRESS.matcher(email).matches()) {
            editTextEmail.setError("Please provide valid email");
            editTextEmail.requestFocus();
            return;
        }


        progressBar.setVisibility(View.VISIBLE);


        mAuth.signInWithEmailAndPassword(email, password).addOnCompleteListener(new OnCompleteListener<AuthResult>() {
            @Override
            public void onComplete(@NonNull Task<AuthResult> task) {
                if (task.isSuccessful()) {

                    FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser();
                    if(user.isEmailVerified()){
                        startActivity(new Intent(MainActivity.this,ManualyScanProductForTestingToDB.class));
                    }else{
                        user.sendEmailVerification();
                        Toast.makeText(MainActivity.this, "Verify you account!! Please check your email account!!", Toast.LENGTH_LONG).show();
                    }

                } else {
                    Toast.makeText(MainActivity.this, "User not found!! Check your credentials or Register an Account!!", Toast.LENGTH_LONG).show();
                }
                progressBar.setVisibility(View.GONE);
            }
        });
    }
}





